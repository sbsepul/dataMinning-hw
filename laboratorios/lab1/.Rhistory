library("reshape")
topAcc <- accidentes[1:9]
topAcc
vec <- melt(topAcc, id=c(1,2,3))
topAcc <- accidentes[1:9]
topAcc
vec <- melt(topAcc, id=c(1,2,3))
topAcc <- accidentes[1:9]
vec <- melt(topAcc, id=c(1,2,3))
MuertesPorAccidente = 100000 * orden_m$Cantidad / (orden_c$Cantidad * orden_c$Poblacion + 1)
orden_m <- muertosPorComuna[order(muertosPorComuna$Descripcion),]
print(muertosPorComuna)
muertosPorComuna <- with(afectados, afectados[Muestra == "Comunal" & Estado == "Muertos" & Anio == 2011, ])
poblacion <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/demografico.txt", header=T)
print(poblacion)
ac_sz <- accidentes[c(1,2,3, 10:13)]
v <- melt(ac_sz, id=c(1,2,3),variable_name = "Estado")
afectados <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/afectados_2010_2011.txt")
library(ggplot2)
ggplot(data = afectados[afectados$Muestra == "Regional", ]) +
geom_bar(aes(x = Descripcion, y = Cantidad), stat = "identity") +
facet_grid(Estado ~ Anio) +
coord_flip() +
xlab("Comuna") +
ylab("Cantidad")
poblacion <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/demografico.txt", header=T)
print(poblacion)
muertosPorComuna <- with(afectados, afectados[Muestra == "Comunal" & Estado == "Muertos" & Anio == 2011, ])
tiposPorComuna <- with(tipos, tipos[Muestra == "Comunal" & Anio == 2011, ])
afectados <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/afectados_2010_2011.txt")
poblacion <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/demografico.txt", header=T)
print(poblacion)
library(readxl)
accidentes <- read_excel("INFORME DE ACCIDENTES DE TRÁNSITO PERIODO 2010 - 2011.xlsx")
head(accidentes)
# RESPUESTA
# Primero traspasamos nuestro dataset a una matriz para poder obtener los datos de una manera mas simple
mat <- as.matrix(accidentes)
#luego ocupamos las librerias de matrix para obtener el numero de filas y de columnas
nrow(mat) #numero de filas
ncol(mat) #numero de columnas
accidentes[100,]
print(accidentes[accidentes$Año==2010 & accidentes$Volcadura!=0,c("Muestra", "Descripcion Muestra" ,"Año", "Volcadura")])
library("reshape")
topAcc <- accidentes[1:9]
vec <- melt(topAcc, id=c(1,2,3))
ac_sz <- accidentes[c(1,2,3, 10:13)]
v <- melt(ac_sz, id=c(1,2,3),variable_name = "Estado")
afectados <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/afectados_2010_2011.txt")
library(ggplot2)
ggplot(data = afectados[afectados$Muestra == "Regional", ]) +
geom_bar(aes(x = Descripcion, y = Cantidad), stat = "identity") +
facet_grid(Estado ~ Anio) +
coord_flip() +
xlab("Comuna") +
ylab("Cantidad")
poblacion <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/demografico.txt", header=T)
print(poblacion)
muertosPorComuna <- with(afectados, afectados[Muestra == "Comunal" & Estado == "Muertos" & Anio == 2011, ])
tiposPorComuna <- with(tipos, tipos[Muestra == "Comunal" & Anio == 2011, ])
muertosPorComuna <- with(afectados, afectados[Muestra == "Comunal" & Estado == "Muertos" & Anio == 2011, ])
tiposPorComuna <- with(tipos, tipos[Muestra == "Comunal" & Anio == 2011, ])
muertosPorComuna <- with(afectados, afectados[Muestra == "Comunal" & Estado == "Muertos" & Anio == 2011, ])
tiposPorComuna <- with(tipos, tipos[Muestra == "Comunal" & Anio == 2011, ])
tipos <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/accidentes_2010_2011.txt")
head(tipos)
muertosPorComuna <- with(afectados, afectados[Muestra == "Comunal" & Estado == "Muertos" & Anio == 2011, ])
tiposPorComuna <- with(tipos, tipos[Muestra == "Comunal" & Anio == 2011, ])
accidentesPorComuna <- aggregate(Cantidad ~ Descripcion, tiposPorComuna, FUN=sum)
cruceAccidentes <- merge(accidentesPorComuna, poblacion, by="Descripcion")
print(muertosPorComuna)
#Muestra la cantidad de muertos por cada comuna del pais el año 2011
print(tiposPorComuna)
#Muestra el tipo de accidente con la cantidad de accidentados por cada comuna del pais el año 2011
print(accidentesPorComuna)
#Muestra el total de accidentes que hubo en cada comuna del pais el año 2011, esto se realiza con una suma por cada tipo de accidente por comuna el año 2011 (group by en tiposPorComuna)
print(cruceAccidentes)
#Muestra la cantidad de accidentes en cada comuna y además muestra la población que hay en cada comuna, esto se realiza para obtener la proporción de accidentes por comuna por cada 10 mil habitantes
tipos <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/accidentes_2010_2011.txt")
head(tipos)
library(readxl)
accidentes <- read_excel("INFORME DE ACCIDENTES DE TRÁNSITO PERIODO 2010 - 2011.xlsx")
head(accidentes)
# RESPUESTA
# Primero traspasamos nuestro dataset a una matriz para poder obtener los datos de una manera mas simple
mat <- as.matrix(accidentes)
#luego ocupamos las librerias de matrix para obtener el numero de filas y de columnas
nrow(mat) #numero de filas
ncol(mat) #numero de columnas
accidentes[100,]
print(accidentes[accidentes$Año==2010 & accidentes$Volcadura!=0,c("Muestra", "Descripcion Muestra" ,"Año", "Volcadura")])
library("reshape")
topAcc <- accidentes[1:9]
vec <- melt(topAcc, id=c(1,2,3))
topAcc <- accidentes[1:9]
vec <- melt(topAcc, id=c(1,2,3))
topAcc <- accidentes[1:9]
vec <- melt(topAcc, id=c(1,2,3))
ac_sz <- accidentes[c(1,2,3, 10:13)]
v <- melt(ac_sz, id=c(1,2,3),variable_name = "Estado")
afectados <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/afectados_2010_2011.txt")
library(ggplot2)
ggplot(data = afectados[afectados$Muestra == "Regional", ]) +
geom_bar(aes(x = Descripcion, y = Cantidad), stat = "identity") +
facet_grid(Estado ~ Anio) +
coord_flip() +
xlab("Comuna") +
ylab("Cantidad")
poblacion <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/demografico.txt", header=T)
print(poblacion)
muertosPorComuna <- with(afectados, afectados[Muestra == "Comunal" & Estado == "Muertos" & Anio == 2011, ])
tiposPorComuna <- with(tipos, tipos[Muestra == "Comunal" & Anio == 2011, ])
accidentesPorComuna <- aggregate(Cantidad ~ Descripcion, tiposPorComuna, FUN=sum)
cruceAccidentes <- merge(accidentesPorComuna, poblacion, by="Descripcion")
print(muertosPorComuna)
#Muestra la cantidad de muertos por cada comuna del pais el año 2011
print(tiposPorComuna)
#Muestra el tipo de accidente con la cantidad de accidentados por cada comuna del pais el año 2011
print(accidentesPorComuna)
#Muestra el total de accidentes que hubo en cada comuna del pais el año 2011, esto se realiza con una suma por cada tipo de accidente por comuna el año 2011 (group by en tiposPorComuna)
print(cruceAccidentes)
#Muestra la cantidad de accidentes en cada comuna y además muestra la población que hay en cada comuna, esto se realiza para obtener la proporción de accidentes por comuna por cada 10 mil habitantes
orden_m <- muertosPorComuna[order(muertosPorComuna$Descripcion),]
orden_c <- cruceAccidentes[order(cruceAccidentes$Descripcion),]
print(orden_m)
MuertesPorAccidente = 100000 * orden_m$Cantidad / (orden_c$Cantidad * orden_c$Poblacion + 1)
muertes <- data.frame(orden_m$Descripcion, MuertesPorAccidente)
names(muertes)[1] <- "Descripcion"
print(muertes)
muertesDesc <- muertes[order(muertes$MuertesPorAccidente,decreasing = TRUE),]
muertesTop <- muertesDesc[1:10,]
print(muertesTop)
library(ggplot2)  # cargamos la librería
ggplot(muertesTop) +   # asociamos un data frame a ggplot
geom_bar(aes(x=reorder(Descripcion, MuertesPorAccidente), y=MuertesPorAccidente), stat="identity") +   # creamos un grafico de barras como una capa
coord_flip() +  # transformamos el grafico invirtiendo los ejes de coordenadas (sólo visualmente)
ggtitle("Comunas con mayor tasa de muertes por A.T el 2011") + # título
xlab("Comuna (descripción)") + ylab("Frecuencia (cantidad)")  # etiquetas
pAcc <- accidentes[1:9]
pAcc <- accidentes[1:9]
acOrder <- melt(pAcc, id=c(1,2,3))
library("reshape")
pAcc <- accidentes[1:9]
acOrder <- melt(pAcc, id=c(1,2,3))
library(readxl)
accidentes <- read_excel("INFORME DE ACCIDENTES DE TRÁNSITO PERIODO 2010 - 2011.xlsx")
head(accidentes)
# RESPUESTA
# Primero traspasamos nuestro dataset a una matriz para poder obtener los datos de una manera mas simple
mat <- as.matrix(accidentes)
#luego ocupamos las librerias de matrix para obtener el numero de filas y de columnas
nrow(mat) #numero de filas
ncol(mat) #numero de columnas
accidentes[100,]
print(accidentes[accidentes$Año==2010 & accidentes$Volcadura!=0,c("Muestra", "Descripcion Muestra" ,"Año", "Volcadura")])
library("reshape")
pAcc <- accidentes[1:9]
acOrder <- melt(pAcc, id=c(1,2,3))
pAcc <- accidentes[1:9]
pAcc2 <- melt(pAcc, id=c(1,2,3))
pAcc <- accidentes[1:9]
pAcc <- melt(pAcc, id=c(1,2,3))
library("reshape")
pAcc <- accidentes[1:9]
pAcc2 <- melt(pAcc, id=c(1,2,3))
f1 <- d[d$fecha == 1,]
d <- data.frame(fecha = c(1,2,1,2),
equipo = c("CC", "CC", "U", "U"),
favor = c(4, 3, 1, 2),
contra = c(0, 2, 4, 0))
d
f1 <- d[d$fecha == 1,]
sum(f1[, c(3,4)])  # c(3,4) indica que tomará la columna 3 y la 4.
sum(f1[, c("favor", "contra")])  # lo mismo
sum(d[d$fecha == 1, 3:4])        # lo mismo
d2 <- melt(d, id=c("fecha", "equipo"))  # fecha y equipo queda fijo, se crea un registro para cada instancia
d2   # observe qué es lo que hace
library("reshape")
d <- data.frame(accidentes[1:9])
pAcc2 <- melt(pAcc, id=c(1,2,3))
library("reshape")
d <- data.frame(accidentes[1:9])
d2 <- melt(d, id=c(1,2,3))
library("reshape")
d <- data.frame(accidentes[1:9])
d2 <- melt(d, id=c(1,2,3))
v11 <- d2[d2$Año==2011, ]
print(v11)
plot(v11$variable, v11$value, ylim=c(0,400), main="Tipos de Accidentes 2011",
xlab="Tipo de accidente", ylab="Cantidad")
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- v[v$Año==2011 & v$Muestra=="Regional" & v$Estado=="Muertos", ]
print(vm11)
barplot(vm11$value, names.arg = vm11$`Descripcion Muestra`)
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- v[v$Año==2011 & v$Muestra=="Regional" & v$Estado=="Muertos", ]
barplot(vm11$value, names.arg = vm11$`Descripcion Muestra`)
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- v[v$Año==2011 & v$Muestra=="Regional" & v$Estado=="Muertos", ]
barplot(vm11$value, names.arg = vm11$`Descripcion Muestra`,main="Car Distribution",
xlab="Number of Gears")
head(afectados)
x <- c(1, 2, 3)
x^2
# un vector cuyos valores son los enteros 1 2 3
c(1, 2, 3)
# un vector cuyos valores son caracteres a,b,c
c("a", "b", "c")
# un vector cuyos valores tienen nombre
c(a = 1, b = 2, c = 3)
# se asigna el valor 5 a la variable a
a <- 5
# la asignacion no imprime el resultado, para ello hay que llamar directamente a la variable
a
# una forma de asignar y evaluar a la vez es usar paréntesis
(a <- 5)
# se asigna un arreglo a a2
a2 <- c(1, a + 1, a - 1)
a2
# se asigna un arreglo a a3 con encabezados incluidos
a3 <- c(a = 1, b = 2, c = a + 2)
names(a3) # muestro los encabezados de a3
# c() también sirve para "combinar" valores
# de esta forma se puede adjuntar valores a un vector
# nota que los números y caracteres son vectores de largo 1
a <- c(1, 2, 3)
b <- c(a, 4, 5, 6)
b
# vector que va de 1 a 10
seq(1, 10)
# azúcar sintáctico para lo anterior
1:10
# vector que va de 1 a 9, cada 2
seq(1, 10, 2)
# repetir un valor N veces
rep(5, 3)
# repetir un vector N veces
rep(c(1, 2), 3)
# suma los valores de un vector
sum(seq(1, 10, 2))
# largo del vector
length(c(1, 2, 3))
# operaciones típicas
# nota que las funciones están vectorizadas, es decir, funcionan sobre escalares y vectores (recuerda que un escalar es un vector de largo 1)
a <- c(1, 3, 5, 7)
exp(a)  # exponencial
sum(a)  # suma
log(a)  # logaritmo natural
log10(a)  # log base 10
mean(a)  # promedio
sd(a)  # desv estandar
median(a)  # mediana
# definimos una tabla con dos columnas, `x` e `y`, cuyos valores son como sigue
d <- data.frame(x = c(10, 20, 30), y = c("a", "b", "c"))
# Muestra todo el data frame, note como se crean los encabezados.
d
# Para mostrar sólo la columna x.
d$x
# Para mostrar sólo la columna y.
d$y
# Para indicar el número de filas de d.
nrow(d)
# Para indicar el número de columnas de d.
ncol(d)
# Para indicar el número de filas y columnas de d
dim(d)
tipos <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/accidentes_2010_2011.txt")
afectados <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/afectados_2010_2011.txt")
str(tipos)
str(afectados)
summary(tipos)
summary(afectados)
mean(tipos$Cantidad)  # promedio columna Cantidad
sd(afectados$Cantidad)  # desviacion estandar
min(tipos$Cantidad)  # minimo (maximo)
median(tipos$Cantidad)  # mediana, el valor que es mayor que el 50% de los datos
quantile(tipos$Cantidad)  # cuantiles, los valores que son mayores que una fracción $q$ de los datos
quantile(tipos$Cantidad, probs = c(0, .5, .8, .9))
IQR(tipos$Cantidad) # diferencia entre cuartil 3 y cuartil 1  (Q3 - Q1), o cuantil 0.75 y cuantil 0.25
# muestra sólo la columna Cantidad
# note que el resultado de esta operación es un Vector
head(tipos$Cantidad)
# en R los índices parten desde 1
# note que el output en este caso es un data frame
head(tipos[5])
head(tipos["Cantidad"])
# se puede seleccionar más de una columna
head(tipos[c(1, 5)])
head(tipos[c("Muestra", "Cantidad")])
# fila 2, columna 5
# el resultado es un vector
tipos[2, 5]
# De la fila 2, muestra todas las columnas
# el resultado es un data frame
tipos[2, ]
head(tipos[2])
# Muestra la columna Cantidad
# en este caso, el output es un vector
head(tipos[, c("Cantidad")])
tipos[1:6, -1]  # Muestra los primeros 6 datos y todas excepto la primera columna
# Para cada valor de la columna Anio, indica si es 2010 o no (mediante True y False)
head(tipos$Anio == 2010)
# Suma cuantos datos hay en la columna Anio con valor 2010
sum(tipos$Anio == 2010)
# Filtra los datos cuyo año es 2010 y muestra todas las columnas (notar que ahora no muestra TRUE/FALSE)
head(tipos[tipos$Anio == 2010, ])
# Filtramos que la columna Anio sea 2010 y además que la columna Muestra sea Comunal. Se muestran todas las columnas.
head(tipos[tipos$Anio == 2010 & tipos$Muestra == "Comunal", ])
# Filtramos que la columna Anio sea 2010 y además que la columna Muestra sea Comunal. Seleccionamos la Descripcion y la Cantidad
head(tipos[tipos$Anio == 2010 & tipos$Muestra == "Comunal", c("Descripcion", "Cantidad")])
with(tipos, tipos[Anio == 2011 & Descripcion == "TEMUCO", ])
# Aplica la función suma (sum) a la columna Cantidad en base a los datos de TipoAccidente.
aggregate(Cantidad ~ TipoAccidente, tipos, FUN=sum)
aggregate(Cantidad ~ TipoAccidente + Anio, tipos, FUN=sum)
unique(tipos$TipoAccidente) # muestra los valores diferentes que tiene la columna TipoAccidente.
tipos_reducido <- tipos[1:10,]  # para hacer el ejemplo pequeño, vamos a tomar los 10 primeros datps de tipos
tipos_reducido[order(tipos_reducido$Cantidad), ] # ordenar ascendentemente la columna Cantidad
tipos_reducido[order(tipos_reducido$Cantidad, decreasing = TRUE), ] # ordenar descendente la columna Cantidad
tipos_reducido[order(-tipos_reducido$Cantidad), ] # Otra forma de ordenar descendente
tipos_reducido[order(tipos_reducido$Cantidad, tipos_reducido$Descripcion), ] # ordenar ascendentemente por Cantidad y Descripción
a <- data.frame(x1 = 0:8, y1 = c(10,20,40,60,80,100,120,140,160))
a
b <- data.frame(x1 = c(1,2,4,6,8,10), y2 = c(0,3,5,7,9,11))
b
merge(a, b, by="x1")
df <- data.frame(x1=1:10, y1=1:10)
df
rowSums(df)  # suma cada fila de df
rowSums(df[df$x1 > 5,])  # suma las filas cuyo x1 es mayor a 5
colSums(df)  # suma cada una de las columnas
library("reshape")
d <- data.frame(fecha = c(1,2,1,2),
equipo = c("CC", "CC", "U", "U"),
favor = c(4, 3, 1, 2),
contra = c(0, 2, 4, 0))
d
f1 <- d[d$fecha == 1,]
sum(f1[, c(3,4)])  # c(3,4) indica que tomará la columna 3 y la 4.
sum(f1[, c("favor", "contra")])  # lo mismo
sum(d[d$fecha == 1, 3:4])        # lo mismo
d2 <- melt(d, id=c("fecha", "equipo"))  # fecha y equipo queda fijo, se crea un registro para cada instancia
d2   # observe qué es lo que hace
f2 <- d2[d2$fecha == 1,]
sum(f2$value)
plot(exp(1:10))
plot(exp(1:10), type = "l")
plot(exp(1:10), main="Mi primer gráfico", xlab="eje x", ylab="eje y", type = "l")
plot(1:1000, runif(1000, 0, 1)) # genera 1000 numeros aleatorios a partir de la distribucion uniforme
plot(1:1000, rnorm(1000, 0, 1)) # genera 1000 numeros aleatorios a partir de la distribucion normal
tipos2010 <- with(tipos,tipos[Muestra == "Regional" & Anio == 2010, ])
plot(tipos2010$TipoAccidente, tipos2010$Cantidad)
plot(tipos2010$TipoAccidente, tipos2010$Cantidad, ylim=c(0,4000), main="TITULO",
xlab="eje x", ylab="eje y")
head(afectados)
afect2010 <- with(afectados,
afectados[ Muestra == "Regional" &
Anio == 2010 &
Estado == "Muertos", ])
barplot(afect2010$Cantidad, names.arg = afect2010$Descripcion)
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- v[v$Año==2011 & v$Muestra=="Regional" & v$Estado=="Muertos", ]
barplot(vm11$value, names.arg = vm11$`Descripcion Muestra`,main="Muertos por region el 2011",
xlab="Regiones")
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- v[v$Año==2011 & v$Muestra=="Regional" & v$Estado=="Muertos", ]
barplot(vm11$value, names.arg = vm11$`Descripcion Muestra`,main="Muertos por region el 2011",
xlab="Regiones", ylab="Cantidad")
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- with(v,
v[ Muestra == "Regional" &
Año == 2011 &
Estado == "Muertos", ])
barplot(vm11$value, names.arg = vm11$`Descripcion Muestra`,main="Muertos por region el 2011",
xlab="Regiones", ylab="Cantidad")
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- with(v,
v[ Muestra == "Regional" &
Año == 2011 &
Estado == "Muertos", ])
barplot(vm11$value, names.arg = vm11$`Descripcion Muestra`,main="Muertos por region el 2011",
xlab="Regiones", ylab="Cantidad")
head(vm11)
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- with(v,
v[ Muestra == "Regional" &
Año == 2011 &
Estado == "Muertos", ])
barplot(vm11$value, names.arg = vm11$`Descripcion Muestra`, horiz=TRUE,main="Muertos por region el 2011",
xlab="Regiones", ylab="Cantidad")
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- with(v,
v[ Muestra == "Regional" &
Año == 2011 &
Estado == "Muertos", ])
barplot(vm11$value, names.arg = vm11$`Descripcion Muestra`, main="Muertos por region el 2011",
xlab="Regiones", ylab="Cantidad")
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- with(v,
v[ Muestra == "Regional" &
Año == 2011 &
Estado == "Muertos", ])
barplot(vm11$value, names.arg=c("XV Region Arica y Parinacota", "VII Region del Maule ", "XI Region de Aysen"), main="Muertos por region el 2011",
xlab="Regiones", ylab="Cantidad")
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- with(v,
v[ Muestra == "Regional" &
Año == 2011 &
Estado == "Muertos", ])
barplot(vm11$value, names.arg = v$`Descripcion Muestra`, main="Muertos por region el 2011",
xlab="Regiones", ylab="Cantidad")
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- with(v,
v[ Muestra == "Regional" &
Año == 2011 &
Estado == "Muertos", ])
barplot(vm11$value, names.arg = vm11$`Descripcion Muestra`, main="Muertos por region el 2011",
xlab="Regiones", ylab="Cantidad")
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- with(v,
v[ Muestra == "Regional" &
Año == 2011 &
Estado == "Muertos", ])
names(vm11)[2] <- "Descripcion"
barplot(vm11$value, names.arg = vm11$Descripcion.Muestra, main="Muertos por region el 2011",
xlab="Regiones", ylab="Cantidad")
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- with(v,
v[ Muestra == "Regional" &
Año == 2011 &
Estado == "Muertos", ])
barplot(vm11$value, names.arg = vm11$Descripcion, main="Muertos por region el 2011",
xlab="Regiones", ylab="Cantidad")
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- with(v,
v[ Muestra == "Regional" &
Año == 2011 &
Estado == "Muertos", ])
barplot(vm11$value, names.arg = vm11$Descripcion, main="Muertos por region el 2011",
xlab="Regiones", ylab="Cantidad")
print(vm11)
library(tidyverse)
library(ggplot2)
afectados_base <- afectados[afectados$Muestra == "Regional", ]
sp <- afectados_base %>%
spread(key = Estado, value = Cantidad)
afectados_mutated <- mutate(sp, Totales = rowSums(sp[c(4:7)]))
afectados_melted <- melt(afectados_mutated, id = c("Muestra","Descripcion","Anio","Totales"),variable_name = "Estado")
tipos <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/accidentes_2010_2011.txt")
head(tipos)
library(readxl)
accidentes <- read_excel("INFORME DE ACCIDENTES DE TRÁNSITO PERIODO 2010 - 2011.xlsx")
head(accidentes)
# RESPUESTA
# Primero traspasamos nuestro dataset a una matriz para poder obtener los datos de una manera mas simple
mat <- as.matrix(accidentes)
#luego ocupamos las librerias de matrix para obtener el numero de filas y de columnas
nrow(mat) #numero de filas
ncol(mat) #numero de columnas
accidentes[100,]
print(accidentes[accidentes$Año==2010 & accidentes$Volcadura!=0,c("Muestra", "Descripcion Muestra" ,"Año", "Volcadura")])
library("reshape")
library("reshape")
d <- data.frame(accidentes[1:9])
d2 <- melt(d, id=c(1,2,3))
v11 <- d2[d2$Año==2011, ]
plot(v11$variable, v11$value, ylim=c(0,400), main="Tipos de Accidentes 2011",
xlab="Tipo de accidente", ylab="Cantidad")
d <- data.frame(accidentes[c(1,2,3, 10:13)])
v <- melt(d, id=c(1,2,3),variable_name = "Estado")
vm11 <- with(v,
v[ Muestra == "Regional" &
Año == 2011 &
Estado == "Muertos", ])
barplot(vm11$value, names.arg = vm11$Descripcion, main="Muertos por region el 2011",
xlab="Regiones", ylab="Cantidad")
print(vm11)
afectados <- read.table("https://users.dcc.uchile.cl/~hsarmien/mineria/datasets/afectados_2010_2011.txt")
library(ggplot2)
ggplot(data = afectados[afectados$Muestra == "Regional", ]) +
geom_bar(aes(x = Descripcion, y = Cantidad), stat = "identity") +
facet_grid(Estado ~ Anio) +
coord_flip() +
xlab("Comuna") +
ylab("Cantidad")
library(tidyverse)
library(ggplot2)
afectados_base <- afectados[afectados$Muestra == "Regional", ]
sp <- afectados_base %>%
spread(key = Estado, value = Cantidad)
afectados_mutated <- mutate(sp, Totales = rowSums(sp[c(4:7)]))
afectados_melted <- melt(afectados_mutated, id = c("Muestra","Descripcion","Anio","Totales"),variable_name = "Estado")
ggplot(afectados_melted) +
geom_bar(aes(x = Descripcion, y = 100*value/Totales), stat = "identity") +
facet_grid(Estado ~ Anio) +
coord_flip() +
xlab("Comuna") +
ylab("Cantidad")
